import { createContext, useContext, useEffect, useRef, useState } from 'react';
import { IAppContextProps } from '../types';
import mock from '../mock';
import { toast } from 'react-hot-toast';

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @type {React.Context<IAppContextProps | null>}
 */
const AppContext = createContext<IAppContextProps | null>(null);


/**
 * –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @component
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
 * @param {React.ReactNode} props.children - –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç.
 */
export const AppProvider = ({ children }: { children: React.ReactNode }) => {
  const [words] = useState<{ word: string; hint: string; }[]>(mock);

  const [word, setWord] = useState<string>(''); // –°–ª–æ–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
  const [hint, setHint] = useState<string>(''); // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ —Å–ª–æ–≤—É.
  const [correctWord, setCorrectWord] = useState<string | null>(null); // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ.
  const [timer, setTimer] = useState<number | null>(null); // –¢–∞–π–º–µ—Ä.
  const [time, setTime] = useState<number>(30); // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è.
  const [isWin, setIsWin] = useState(false); // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä—É.

  const inputRef = useRef<HTMLInputElement | null>(null);
  const btnRef = useRef<HTMLButtonElement | null>(null);

  useEffect(function() {
    initGame(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
  }, []);

  useEffect(() => {
    if (time === 0) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
      toast.error(`Time off! ${correctWord?.toUpperCase()} was the correct word`);
      if (btnRef.current) btnRef.current.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É.
      clearInterval(timer!);
    } else if (timer !== null) {
      if (isWin) {
        return clearInterval(timer!); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª.
      }
      const timerId = setInterval(() => {
        setTime((prevTime) => prevTime - 1);
      }, 1000);
      return () => clearInterval(timerId);
    }
  }, [time, correctWord, timer]);

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
   */
  function initGame(): void {
    setTime(30);
    setIsWin(false);
    setTimer(time);
    const { word, hint } = words[Math.floor(Math.random() * words.length)];
    console.log(`üëãCorrect word : ` + word);
    let wordArray: string[] = word.split('');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ.
    for (let i = wordArray.length - 1; i > 0; i--) {
      let j = Math.floor(Math.random() * (i + 1));
      [wordArray[i], wordArray[j]] = [wordArray[j], wordArray[i]];
    }

    setWord(wordArray.join('')); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
    setHint(hint); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É.
    setCorrectWord(word.toLowerCase()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ.
    if (inputRef.current) inputRef.current.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞.
    if (btnRef.current) btnRef.current.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É.
  }

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–∞.
   */
  function checkWord(): void {
    let word = inputRef.current?.value.toLowerCase();
    if (!word) {
      toast.error('Please enter the word to check!');
      return;
    }
    if (word !== correctWord) {
      toast.error(`Oops! ${word.toUpperCase()} is not a correct word`);
      return;
    }
    if (word === correctWord) {
      toast.success(`Congrats! The correct word is: ${correctWord.toUpperCase()} `);
      setIsWin(true);
    }
  }
  return (
    <AppContext.Provider value={{word, hint, time, inputRef, initGame, btnRef, checkWord}}>
      {children}
    </AppContext.Provider>
  );
};

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @returns {IAppContextProps} –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @throws {Error} –ï—Å–ª–∏ —Ö—É–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ AppProvider.
 */
export const useAppContext = (): IAppContextProps => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AppProvider');
  }
  return context;
};
